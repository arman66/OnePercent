{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAIL, USER_LOGOUT, USER_LOGIN_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: {\n        USER_LOGIN_SUCCESS\n      },\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  document.location.href = '/login';\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: {\n        USER_REGISTER_SUCCESS,\n        payload: data\n      }\n    });\n    dispatch({\n      type: {\n        USER_LOGIN_REQUEST,\n        payload: data\n      }\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/armin/Documents/Projects/OnePercent/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_FAIL","USER_LOGOUT","USER_LOGIN_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","document","location","href","register","name"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {USER_LOGIN_REQUEST, USER_LOGIN_FAIL, USER_LOGOUT, USER_LOGIN_SUCCESS,USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,} from '../constants/userConstants'\n\n\nexport const login =(email, password)=> async (dispatch)=>{\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n        const config={\n            headers:{\n                'Content-Type':'application/json'\n            },\n        }\n\n        const {data} = await axios.post(\n            'api/users/login',\n            {email, password}, config\n        )\n        dispatch({\n            type:{USER_LOGIN_SUCCESS},\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          })\n    }\n}\n\nexport const logout = ()=>(dispatch)=>{\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    document.location.href = '/login'\n}\n\nexport const register = (name, email, password)=> async(dispatch)=>{\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n        const config={\n            headers:{\n                'Content-Type':'application/json'\n            },\n        }\n\n        const { data } = await axios.post(\n            '/api/users',\n            { name, email, password },\n            config\n          )\n          dispatch({\n              type:{\n                  USER_REGISTER_SUCCESS, payload: data\n    \n              }\n          })\n          dispatch({\n              type:{USER_LOGIN_REQUEST,\n            payload: data}\n          })\n\n          localStorage.setItem('userInfo',JSON.stringify(data))\n\n        \n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          })\n    }\n}"]},"metadata":{},"sourceType":"module"}